#!/usr/bin/env python3
"""
Lightning Bot Espec√≠fico - Processa apenas dep√≥sito espec√≠fico do usu√°rio
Evita spam de notifica√ß√µes de todos os dep√≥sitos do sistema
"""

import requests
import json
import time
import logging
from datetime import datetime
import sys
import os

# Configura√ß√µes
SPECIFIC_ENDPOINT = "https://useghost.squareweb.app/api/lightning_cron_specific.php"
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # Configurar com token real
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/mau/bot/ghost/logs/lightning_specific.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class LightningSpecificBot:
    
    def __init__(self):
        self.session = requests.Session()
        self.session.timeout = 30
    
    def process_specific_deposit(self, depix_id, chat_id):
        """
        Processa um dep√≥sito Lightning espec√≠fico para um usu√°rio espec√≠fico
        
        Args:
            depix_id: ID do dep√≥sito a processar
            chat_id: Chat ID do usu√°rio
        """
        try:
            logging.info(f"Processando dep√≥sito espec√≠fico {depix_id} para chat {chat_id}")
            
            # Consultar endpoint espec√≠fico
            url = f"{SPECIFIC_ENDPOINT}?depix_id={depix_id}"
            response = self.session.get(url)
            response.raise_for_status()
            
            data = response.json()
            
            if not data.get('success'):
                logging.error(f"Erro ao processar {depix_id}: {data.get('error')}")
                return False
            
            result = data.get('result', {})
            status = result.get('status')
            
            # Verificar se precisa de a√ß√£o do usu√°rio
            if status == 'awaiting_client_invoice':
                amount_sats = result.get('amount_sats', 0)
                amount_brl = result.get('amount_brl', 0)
                
                # Enviar mensagem espec√≠fica para este usu√°rio
                success = self.send_lightning_request(
                    chat_id=chat_id,
                    depix_id=depix_id,
                    amount_sats=amount_sats,
                    amount_brl=amount_brl
                )
                
                if success:
                    logging.info(f"‚úÖ Notifica√ß√£o enviada para chat {chat_id} - Dep√≥sito {depix_id}")
                    return True
                else:
                    logging.error(f"‚ùå Falha ao enviar notifica√ß√£o para chat {chat_id}")
                    return False
            else:
                logging.info(f"Dep√≥sito {depix_id} n√£o precisa de a√ß√£o: {status}")
                return True
                
        except Exception as e:
            logging.error(f"Erro ao processar dep√≥sito {depix_id}: {e}")
            return False
    
    def send_lightning_request(self, chat_id, depix_id, amount_sats, amount_brl):
        """Envia mensagem solicitando Lightning Address/Invoice para usu√°rio espec√≠fico"""
        try:
            message = f"""üéâ *SEU DEP√ìSITO PIX FOI CONFIRMADO!*

üí∞ *Valor depositado:* R$ {amount_brl:.2f}
‚ö° *Bitcoin a receber:* {amount_sats:,} sats
üìÑ *ID do seu dep√≥sito:* `{depix_id}`

üîó *Para receber seus bitcoins via Lightning Network:*

üìù *Envie uma das op√ß√µes:*
‚Ä¢ *Lightning Address:* usuario@walletofsatoshi.com
‚Ä¢ *BOLT11 Invoice:* lnbc1...

üí° *Dica:* Use wallets como Wallet of Satoshi, Phoenix, ou Breez

‚è±Ô∏è *Responda com seu endere√ßo Lightning para processar o pagamento automaticamente.*

üÜî *Seu dep√≥sito espec√≠fico:* `{depix_id}`"""
            
            result = self.send_telegram_message(chat_id, message)
            return result.get('success', False)
            
        except Exception as e:
            logging.error(f"Erro ao preparar notifica√ß√£o espec√≠fica: {e}")
            return False
    
    def send_telegram_message(self, chat_id, message):
        """Envia mensagem via API do Telegram"""
        try:
            url = f"{TELEGRAM_API}/sendMessage"
            
            data = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            response = self.session.post(url, json=data)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    return {'success': True, 'message_id': result['result']['message_id']}
                else:
                    return {'success': False, 'error': f"API Telegram erro: {result}"}
            else:
                return {'success': False, 'error': f"HTTP {response.status_code}: {response.text}"}
                
        except Exception as e:
            return {'success': False, 'error': f"Erro na requisi√ß√£o: {e}"}

def main():
    """Fun√ß√£o principal - pode ser chamada com depix_id espec√≠fico"""
    
    if len(sys.argv) < 3:
        print("Uso: python lightning_specific_bot.py <depix_id> <chat_id>")
        print("Exemplo: python lightning_specific_bot.py 0197e9e7d0d17dfc9b9ee24c0c36ba2a 7910260237")
        sys.exit(1)
    
    depix_id = sys.argv[1]
    chat_id = sys.argv[2]
    
    print(f"üöÄ Processando dep√≥sito espec√≠fico {depix_id} para chat {chat_id}")
    
    bot = LightningSpecificBot()
    success = bot.process_specific_deposit(depix_id, chat_id)
    
    if success:
        print(f"‚úÖ Dep√≥sito {depix_id} processado com sucesso!")
    else:
        print(f"‚ùå Erro ao processar dep√≥sito {depix_id}")
        sys.exit(1)

if __name__ == "__main__":
    main()
