#!/usr/bin/env python3
"""
TESTE ESPEC√çFICO - IDs Fornecidos pelo Usu√°rio
==============================================

Este script testa especificamente os depix_ids fornecidos pelo usu√°rio
para verificar se conseguimos for√ßar a gera√ß√£o de invoices Lightning.
"""

import sys
import os
sys.path.append('/home/mau/bot/ghost')

import requests
import json
import time
from api.voltz import VoltzAPI

# IDs fornecidos pelo usu√°rio
DEPIX_IDS_TESTE = [
    "0197e0ed06537df9820a28f5a5380a3b",
    "0197e10b5b8f7df9a6bf9430188534e4",
    "0197e12300eb7df9808ca5d7719ea40e", 
    "0197e5214a377dfaae6e541f68057444"
]

def buscar_dados_deposito(depix_id):
    """Busca dados completos de um dep√≥sito pelo depix_id."""
    url = f"https://useghost.squareweb.app/rest/deposit.php"
    
    try:
        # Primeiro, tentar buscar por depix_id
        response = requests.get(f"{url}?depix_id={depix_id}", timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if data.get('success') and data.get('deposit'):
            return data['deposit']
        
        print(f"‚ö†Ô∏è Dep√≥sito {depix_id} n√£o encontrado pela busca direta")
        return None
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar dep√≥sito {depix_id}: {e}")
        return None

def forcar_confirmacao_deposito(depix_id, fake_txid=None):
    """For√ßa a confirma√ß√£o de um dep√≥sito alterando status e txid."""
    if not fake_txid:
        fake_txid = f"teste_blockchain_{int(time.time())}"
    
    url = "https://useghost.squareweb.app/api/update_transaction.php"
    
    data = {
        'depix_id': depix_id,
        'status': 'confirmado',
        'blockchainTxID': fake_txid
    }
    
    try:
        response = requests.post(url, data=data, timeout=10)
        response.raise_for_status()
        result = response.json()
        
        if result.get('success'):
            print(f"‚úÖ Status for√ßado para 'confirmado' com TxID: {fake_txid}")
            return True
        else:
            print(f"‚ùå Erro ao for√ßar confirma√ß√£o: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao for√ßar confirma√ß√£o: {e}")
        return False

def verificar_invoice_gerado(depix_id, max_tentativas=5):
    """Verifica se o invoice foi gerado ap√≥s confirma√ß√£o."""
    voltz = VoltzAPI()
    
    print(f"\nüîç Verificando se invoice foi gerado para {depix_id}...")
    
    for tentativa in range(1, max_tentativas + 1):
        print(f"   Tentativa {tentativa}/{max_tentativas}...")
        
        status = voltz.check_deposit_status(depix_id)
        
        if status.get('success'):
            print(f"‚úÖ Status Voltz: {status.get('status')}")
            
            if status.get('invoice'):
                print(f"‚ö° INVOICE GERADO COM SUCESSO!")
                print(f"üìã Payment Request: {status['invoice'][:50]}...")
                if status.get('qr_code'):
                    print(f"üì± QR Code: {status['qr_code']}")
                return status
            else:
                print("   Aguardando invoice ser gerado...")
        else:
            print(f"‚ùå Erro Voltz: {status.get('error', 'Erro desconhecido')}")
        
        if tentativa < max_tentativas:
            print("   ‚è±Ô∏è Aguardando 3 segundos...")
            time.sleep(3)
    
    print("‚è∞ Invoice n√£o foi gerado no tempo esperado")
    return None

def executar_cron_voltz():
    """Executa o processamento do cron Voltz."""
    print("\nüîÑ Executando cron Voltz...")
    
    try:
        url = "https://useghost.squareweb.app/voltz/voltz_rest.php"
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        print("‚úÖ Cron Voltz executado")
        print(f"üìù Resposta: {response.text[:100]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao executar cron: {e}")
        return False

def testar_depix_id(depix_id):
    """Testa um depix_id espec√≠fico."""
    print(f"\n{'='*60}")
    print(f"üß™ TESTANDO DEPIX_ID: {depix_id}")
    print(f"{'='*60}")
    
    # 1. Buscar dados do dep√≥sito
    print("1Ô∏è‚É£ Buscando dados do dep√≥sito...")
    deposit_data = buscar_dados_deposito(depix_id)
    
    if not deposit_data:
        print(f"‚ùå Dep√≥sito {depix_id} n√£o foi encontrado na base de dados")
        print("   Pode ter sido removido ou nunca existido")
        return False
    
    print(f"‚úÖ Dep√≥sito encontrado:")
    print(f"   Status atual: {deposit_data.get('status')}")
    print(f"   Valor: R$ {deposit_data.get('amount_in_cents', 0)/100:.2f}")
    print(f"   Moeda: {deposit_data.get('moeda')}")
    print(f"   Rede: {deposit_data.get('rede')}")
    print(f"   TxID: {deposit_data.get('blockchainTxID', 'Nenhum')}")
    
    # 2. Verificar se j√° tem invoice
    print("\n2Ô∏è‚É£ Verificando se j√° existe invoice...")
    voltz = VoltzAPI()
    status_inicial = voltz.check_deposit_status(depix_id)
    
    if status_inicial.get('success') and status_inicial.get('invoice'):
        print(f"‚ö° INVOICE J√Å EXISTE!")
        print(f"üìã Payment Request: {status_inicial['invoice'][:50]}...")
        return True
    
    # 3. For√ßar confirma√ß√£o se necess√°rio
    if deposit_data.get('status') != 'confirmado':
        print(f"\n3Ô∏è‚É£ For√ßando confirma√ß√£o do dep√≥sito...")
        if not forcar_confirmacao_deposito(depix_id):
            print("‚ùå Falha ao for√ßar confirma√ß√£o")
            return False
    else:
        print(f"\n3Ô∏è‚É£ Dep√≥sito j√° est√° confirmado")
    
    # 4. Executar cron Voltz
    print(f"\n4Ô∏è‚É£ Executando processamento Voltz...")
    if not executar_cron_voltz():
        print("‚ùå Falha ao executar cron")
        return False
    
    # 5. Verificar se invoice foi gerado
    print(f"\n5Ô∏è‚É£ Verificando gera√ß√£o do invoice...")
    invoice_result = verificar_invoice_gerado(depix_id)
    
    if invoice_result:
        print(f"\nüéâ SUCESSO! Invoice gerado para {depix_id}")
        return True
    else:
        print(f"\n‚ùå FALHA! Invoice n√£o foi gerado para {depix_id}")
        return False

def main():
    print("üß™ TESTE ESPEC√çFICO - IDs DO USU√ÅRIO")
    print("=" * 50)
    
    print("üìã IDs fornecidos para teste:")
    for i, depix_id in enumerate(DEPIX_IDS_TESTE, 1):
        print(f"   {i}. {depix_id}")
    
    print(f"\nOp√ß√µes:")
    print("1. Testar um ID espec√≠fico")
    print("2. Testar todos os IDs sequencialmente")
    print("3. Testar apenas IDs que existem na base")
    
    try:
        opcao = int(input("\nEscolha uma op√ß√£o (1-3): "))
        
        if opcao == 1:
            # Testar um ID espec√≠fico
            print("\nEscolha o ID para testar:")
            for i, depix_id in enumerate(DEPIX_IDS_TESTE, 1):
                print(f"{i}. {depix_id}")
            
            escolha = int(input("Digite o n√∫mero: ")) - 1
            if 0 <= escolha < len(DEPIX_IDS_TESTE):
                testar_depix_id(DEPIX_IDS_TESTE[escolha])
            else:
                print("‚ùå Escolha inv√°lida")
        
        elif opcao == 2:
            # Testar todos sequencialmente
            sucessos = 0
            for depix_id in DEPIX_IDS_TESTE:
                if testar_depix_id(depix_id):
                    sucessos += 1
                print(f"\n{'‚è≠Ô∏è ' * 20}")
            
            print(f"\nüìä RESUMO FINAL:")
            print(f"   Total testados: {len(DEPIX_IDS_TESTE)}")
            print(f"   Sucessos: {sucessos}")
            print(f"   Falhas: {len(DEPIX_IDS_TESTE) - sucessos}")
        
        elif opcao == 3:
            # Testar apenas IDs que existem
            print("\nüîç Verificando quais IDs existem na base...")
            ids_existentes = []
            
            for depix_id in DEPIX_IDS_TESTE:
                print(f"   Verificando {depix_id}...")
                if buscar_dados_deposito(depix_id):
                    print(f"   ‚úÖ Existe")
                    ids_existentes.append(depix_id)
                else:
                    print(f"   ‚ùå N√£o existe")
            
            if not ids_existentes:
                print("\n‚ùå Nenhum dos IDs existe na base de dados")
                return
            
            print(f"\nüìã IDs existentes encontrados: {len(ids_existentes)}")
            for depix_id in ids_existentes:
                print(f"   ‚Ä¢ {depix_id}")
            
            if input("\nTestar todos os IDs existentes? (s/n): ").lower() == 's':
                sucessos = 0
                for depix_id in ids_existentes:
                    if testar_depix_id(depix_id):
                        sucessos += 1
                
                print(f"\nüìä RESUMO:")
                print(f"   IDs existentes testados: {len(ids_existentes)}")
                print(f"   Sucessos: {sucessos}")
        
        else:
            print("‚ùå Op√ß√£o inv√°lida")
    
    except ValueError:
        print("‚ùå N√∫mero inv√°lido")
    except KeyboardInterrupt:
        print("\n\nüõë Teste interrompido pelo usu√°rio")

if __name__ == "__main__":
    main()
