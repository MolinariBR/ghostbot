#!/usr/bin/env python3
"""
Teste Espec√≠fico do Sistema de Comiss√µes
Verifica limites exatos das faixas e casos especiais
"""

import sys
import os
sys.path.append('/home/mau/bot/ghost')

from limites.comissao import calcular_comissao, obter_faixas_moeda, validar_valor_minimo, obter_valor_minimo

def teste_faixas_btc():
    """Testa as faixas espec√≠ficas do BTC."""
    print("ü™ô TESTE BTC - Faixas Espec√≠ficas")
    print("-" * 40)
    
    # Testa os limites exatos das faixas
    valores_teste = [
        (9.99, "Abaixo do m√≠nimo"),
        (10.00, "Limite inferior faixa 1"),
        (500.00, "Limite superior faixa 1"),
        (500.01, "Limite inferior faixa 2"),
        (1000.00, "Limite superior faixa 2"),
        (1000.01, "Limite inferior faixa 3"),
        (4999.99, "Limite superior faixa 3"),
        (5000.00, "Acima do m√°ximo"),
    ]
    
    for valor, descricao in valores_teste:
        resultado = calcular_comissao(valor, 'BTC')
        if resultado:
            comissao = resultado['comissao']
            print(f"R$ {valor:8.2f} ({descricao:22}): {comissao['percentual']:4.1f}% + R${comissao['fixo']:5.2f} = R${comissao['total']:6.2f}")
        else:
            print(f"R$ {valor:8.2f} ({descricao:22}): ‚ùå Fora das faixas")
    
    print()

def teste_faixas_stablecoins():
    """Testa as faixas das stablecoins (DEPIX e USDT)."""
    print("üí≥ TESTE STABLECOINS - Faixas Espec√≠ficas")
    print("-" * 40)
    
    for moeda in ['DEPIX', 'USDT']:
        print(f"\nüî∏ {moeda}:")
        valores_teste = [
            (99.99, "Abaixo do m√≠nimo"),
            (100.00, "Valor m√≠nimo"),
            (500.00, "Valor m√©dio"),
            (10000.00, "Valor alto"),
        ]
        
        for valor, descricao in valores_teste:
            resultado = calcular_comissao(valor, moeda)
            if resultado:
                comissao = resultado['comissao']
                print(f"  R$ {valor:8.2f} ({descricao:15}): {comissao['percentual']:4.1f}% + R${comissao['fixo']:5.2f} = R${comissao['total']:6.2f}")
            else:
                print(f"  R$ {valor:8.2f} ({descricao:15}): ‚ùå Fora das faixas")

def teste_valores_minimos():
    """Testa os valores m√≠nimos por moeda."""
    print("\nüí∞ TESTE VALORES M√çNIMOS")
    print("-" * 40)
    
    for moeda in ['BTC', 'DEPIX', 'USDT']:
        minimo = obter_valor_minimo(moeda)
        print(f"{moeda:5}: R$ {minimo:8.2f}")
        
        # Testa valida√ß√£o
        valido_abaixo = validar_valor_minimo(minimo - 0.01, moeda)
        valido_exato = validar_valor_minimo(minimo, moeda)
        
        print(f"      Valida√ß√£o R$ {minimo-0.01:6.2f}: {'‚úÖ' if valido_abaixo else '‚ùå'}")
        print(f"      Valida√ß√£o R$ {minimo:6.2f}: {'‚úÖ' if valido_exato else '‚ùå'}")

def teste_informacoes_faixas():
    """Mostra informa√ß√µes detalhadas das faixas."""
    print("\nüìä INFORMA√á√ïES DAS FAIXAS")
    print("-" * 40)
    
    for moeda in ['BTC', 'DEPIX', 'USDT']:
        print(f"\nüî∏ {moeda}:")
        faixas = obter_faixas_moeda(moeda)
        
        for i, faixa in enumerate(faixas, 1):
            min_val = faixa['min']
            max_val = faixa['max']
            percentual = faixa['percentual']
            fixo = faixa['fixo']
            
            if max_val:
                range_str = f"R$ {min_val:8.2f} a R$ {max_val:8.2f}"
            else:
                range_str = f"R$ {min_val:8.2f} ou mais"
            
            print(f"  Faixa {i}: {range_str} - {percentual:4.1f}% + R$ {fixo:5.2f}")

if __name__ == "__main__":
    print("üß™ TESTE DETALHADO DO SISTEMA DE COMISS√ïES")
    print("=" * 50)
    
    teste_faixas_btc()
    teste_faixas_stablecoins()
    teste_valores_minimos()
    teste_informacoes_faixas()
    
    print("\n" + "=" * 50)
    print("‚úÖ Todos os testes conclu√≠dos!")
