#!/usr/bin/env python3
"""
Teste do Novo Resumo de Compra
==============================

Este teste verifica se o novo resumo de compra est√° funcionando corretamente
com todos os campos solicitados.
"""

import sys
import os
sys.path.append('/home/mau/bot/ghost')

from menus.menu_compra import gerar_resumo_compra
from limites.comissao import calcular_comissao
import asyncio

class MockContext:
    """Mock do Context do Telegram para teste."""
    def __init__(self):
        self.user_data = {}

def teste_resumo_compra():
    """Testa a gera√ß√£o do resumo de compra com diferentes cen√°rios."""
    
    print("üß™ TESTE DO NOVO RESUMO DE COMPRA")
    print("=" * 50)
    
    # Cen√°rios de teste
    cenarios = [
        {
            'nome': 'BTC On-Chain via PIX',
            'dados': {
                'moeda': 'BTC',
                'rede': 'ONCHAIN',
                'valor_brl': 500.00,
                'cotacao': 250000.00,
                'metodo_pagamento': 'PIX'
            }
        },
        {
            'nome': 'BTC Lightning Network via TED',
            'dados': {
                'moeda': 'BTC',
                'rede': 'LNT',
                'valor_brl': 1500.00,
                'cotacao': 250000.00,
                'metodo_pagamento': 'TED'
            }
        },
        {
            'nome': 'DEPIX via PIX',
            'dados': {
                'moeda': 'DEPIX',
                'rede': 'STABLE',
                'valor_brl': 300.00,
                'cotacao': 1.00,
                'metodo_pagamento': 'PIX'
            }
        },
        {
            'nome': 'USDT Polygon via Boleto',
            'dados': {
                'moeda': 'USDT',
                'rede': 'POLYGON',
                'valor_brl': 800.00,
                'cotacao': 5.20,
                'metodo_pagamento': 'BOLETO'
            }
        }
    ]
    
    for i, cenario in enumerate(cenarios, 1):
        print(f"\nüî∏ CEN√ÅRIO {i}: {cenario['nome']}")
        print("-" * 40)
        
        # Cria mock do contexto
        context = MockContext()
        context.user_data = cenario['dados']
        
        # Gera o resumo
        resumo = gerar_resumo_compra(context)
        
        # Exibe o resumo
        print(resumo)
        
        # Verifica se os dados est√£o corretos
        dados = cenario['dados']
        resultado_comissao = calcular_comissao(dados['valor_brl'], dados['moeda'])
        
        if resultado_comissao:
            print(f"\nüìã Verifica√ß√£o:")
            print(f"   ‚Ä¢ Valor investido: R$ {dados['valor_brl']:.2f}")
            print(f"   ‚Ä¢ Comiss√£o: R$ {resultado_comissao['comissao']['total']:.2f}")
            print(f"   ‚Ä¢ Taxa parceiro: R$ {1.00 if dados['metodo_pagamento'] in ['PIX', 'DEPIX'] else 0.00:.2f}")
            print(f"   ‚Ä¢ Valor l√≠quido: R$ {resultado_comissao['valor_liquido']:.2f}")
            print(f"   ‚Ä¢ Cota√ß√£o: R$ {dados['cotacao']:.2f}")
            
            # Calcula quantidade esperada
            taxa_parceiro = 1.00 if dados['metodo_pagamento'] in ['PIX', 'DEPIX'] else 0.00
            valor_final = resultado_comissao['valor_liquido'] - taxa_parceiro
            quantidade_esperada = valor_final / dados['cotacao']
            print(f"   ‚Ä¢ Quantidade esperada: {quantidade_esperada:.8f} {dados['moeda']}")
        else:
            print(f"\n‚ùå Erro: N√£o foi poss√≠vel calcular a comiss√£o para {dados['moeda']}")
    
    print("\n" + "=" * 50)
    print("‚úÖ Teste conclu√≠do!")

def teste_campos_obrigatorios():
    """Testa se todos os campos obrigat√≥rios est√£o presentes."""
    
    print("\nüîç TESTE DOS CAMPOS OBRIGAT√ìRIOS")
    print("=" * 50)
    
    # Dados de teste
    context = MockContext()
    context.user_data = {
        'moeda': 'BTC',
        'rede': 'ONCHAIN',
        'valor_brl': 1000.00,
        'cotacao': 250000.00,
        'metodo_pagamento': 'PIX'
    }
    
    resumo = gerar_resumo_compra(context)
    
    # Campos obrigat√≥rios
    campos_obrigatorios = [
        'Moeda:',
        'Rede:',
        'Valor Investido:',
        'Parceiro:',
        'Comiss√£o:',
        'Cota√ß√£o:',
        'Voc√™ receber√°:'
    ]
    
    print("üìã Verificando campos obrigat√≥rios:")
    for campo in campos_obrigatorios:
        if campo in resumo:
            print(f"   ‚úÖ {campo}")
        else:
            print(f"   ‚ùå {campo} - AUSENTE")
    
    print(f"\nüìÑ Resumo gerado:")
    print(resumo)

if __name__ == "__main__":
    teste_resumo_compra()
    teste_campos_obrigatorios()
    
    print("\n" + "=" * 50)
    print("üéØ RESUMO DO TESTE:")
    print("‚Ä¢ Novo formato de resumo implementado")
    print("‚Ä¢ Todos os campos solicitados inclu√≠dos")
    print("‚Ä¢ C√°lculos autom√°ticos funcionando")
    print("‚Ä¢ Taxa do parceiro aplicada corretamente")
    print("‚Ä¢ Formata√ß√£o clara e organizada")
