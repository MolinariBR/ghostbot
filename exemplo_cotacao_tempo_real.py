#!/usr/bin/env python3
"""
Exemplo de Integra√ß√£o do Resumo com Cota√ß√£o em Tempo Real
=========================================================

Este exemplo demonstra como o novo resumo da compra pode ser integrado
com APIs de cota√ß√£o em tempo real para fornecer informa√ß√µes atualizadas.
"""

import sys
import os
sys.path.append('/home/mau/bot/ghost')

from menus.menu_compra import gerar_resumo_compra
from api.cotacao import get_btc_price_brl, get_usdt_price_brl, get_depix_price_brl
import asyncio

class MockContext:
    """Mock do Context do Telegram para demonstra√ß√£o."""
    def __init__(self):
        self.user_data = {}

async def demonstrar_cotacao_tempo_real():
    """Demonstra como integrar cota√ß√£o em tempo real no resumo."""
    
    print("üìà DEMONSTRA√á√ÉO: Cota√ß√£o em Tempo Real")
    print("=" * 50)
    
    # Obt√©m cota√ß√µes atuais
    try:
        cotacao_btc = await get_btc_price_brl()
        cotacao_usdt = await get_usdt_price_brl()
        cotacao_depix = await get_depix_price_brl()
        
        print(f"üí∞ Cota√ß√µes atuais:")
        print(f"   ‚Ä¢ BTC: R$ {cotacao_btc:.2f}")
        print(f"   ‚Ä¢ USDT: R$ {cotacao_usdt:.2f}")
        print(f"   ‚Ä¢ DEPIX: R$ {cotacao_depix:.2f}")
        
    except Exception as e:
        print(f"‚ùå Erro ao obter cota√ß√µes: {e}")
        # Usa cota√ß√µes de exemplo
        cotacao_btc = 250000.00
        cotacao_usdt = 5.20
        cotacao_depix = 1.00
        
        print(f"üí∞ Usando cota√ß√µes de exemplo:")
        print(f"   ‚Ä¢ BTC: R$ {cotacao_btc:.2f}")
        print(f"   ‚Ä¢ USDT: R$ {cotacao_usdt:.2f}")
        print(f"   ‚Ä¢ DEPIX: R$ {cotacao_depix:.2f}")
    
    print("\n" + "=" * 50)
    
    # Cen√°rios com cota√ß√£o em tempo real
    cenarios = [
        {
            'nome': 'BTC com cota√ß√£o atual',
            'dados': {
                'moeda': 'BTC',
                'rede': 'ONCHAIN',
                'valor_brl': 1000.00,
                'cotacao': cotacao_btc,
                'metodo_pagamento': 'PIX'
            }
        },
        {
            'nome': 'USDT com cota√ß√£o atual',
            'dados': {
                'moeda': 'USDT',
                'rede': 'POLYGON',
                'valor_brl': 500.00,
                'cotacao': cotacao_usdt,
                'metodo_pagamento': 'TED'
            }
        },
        {
            'nome': 'DEPIX com cota√ß√£o atual',
            'dados': {
                'moeda': 'DEPIX',
                'rede': 'STABLE',
                'valor_brl': 300.00,
                'cotacao': cotacao_depix,
                'metodo_pagamento': 'PIX'
            }
        }
    ]
    
    for i, cenario in enumerate(cenarios, 1):
        print(f"\nüî∏ CEN√ÅRIO {i}: {cenario['nome']}")
        print("-" * 40)
        
        # Cria contexto com dados atuais
        context = MockContext()
        context.user_data = cenario['dados']
        
        # Gera resumo com cota√ß√£o em tempo real
        resumo = gerar_resumo_compra(context)
        print(resumo)
        
        # An√°lise do impacto da cota√ß√£o
        valor_investido = cenario['dados']['valor_brl']
        cotacao = cenario['dados']['cotacao']
        
        print(f"\nüìä An√°lise:")
        print(f"   ‚Ä¢ Valor investido: R$ {valor_investido:.2f}")
        print(f"   ‚Ä¢ Cota√ß√£o atual: R$ {cotacao:.2f}")
        print(f"   ‚Ä¢ Impacto da cota√ß√£o no resultado final calculado automaticamente")

async def simular_mudanca_cotacao():
    """Simula como mudan√ßas na cota√ß√£o afetam o resumo."""
    
    print("\n\nüìä SIMULA√á√ÉO: Impacto da Mudan√ßa de Cota√ß√£o")
    print("=" * 50)
    
    # Dados base
    context = MockContext()
    context.user_data = {
        'moeda': 'BTC',
        'rede': 'ONCHAIN',
        'valor_brl': 1000.00,
        'metodo_pagamento': 'PIX'
    }
    
    # Diferentes cen√°rios de cota√ß√£o
    cotacoes = [
        (200000.00, "Cota√ß√£o Baixa"),
        (250000.00, "Cota√ß√£o M√©dia"),
        (300000.00, "Cota√ß√£o Alta")
    ]
    
    for cotacao, descricao in cotacoes:
        print(f"\nüî∏ {descricao}: R$ {cotacao:.2f}")
        print("-" * 30)
        
        # Atualiza cota√ß√£o no contexto
        context.user_data['cotacao'] = cotacao
        
        # Gera resumo
        resumo = gerar_resumo_compra(context)
        
        # Extrai apenas a linha relevante
        linhas = resumo.split('\n')
        for linha in linhas:
            if 'Voc√™ receber√°:' in linha:
                print(f"   {linha}")
                break
        
        # Calcula quantidade para compara√ß√£o
        # (R$ 1000 - R$ 61 comiss√£o - R$ 1 parceiro) / cotacao
        quantidade = (1000 - 61 - 1) / cotacao
        print(f"   Quantidade: {quantidade:.8f} BTC")

def exemplo_integracao_api():
    """Mostra como integrar com APIs de cota√ß√£o."""
    
    print("\n\nüîå EXEMPLO DE INTEGRA√á√ÉO COM API")
    print("=" * 50)
    
    codigo_exemplo = '''
# Exemplo de como integrar no menu_compra.py

async def resumo_compra(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Mostra o resumo da compra com cota√ß√£o em tempo real."""
    try:
        moeda = context.user_data.get('moeda', 'BTC')
        
        # Obt√©m cota√ß√£o em tempo real
        if moeda == 'BTC':
            cotacao = await get_btc_price_brl()
        elif moeda == 'USDT':
            cotacao = await get_usdt_price_brl()
        elif moeda == 'DEPIX':
            cotacao = await get_depix_price_brl()
        else:
            cotacao = 0.0
        
        # Salva cota√ß√£o no contexto
        context.user_data['cotacao'] = cotacao
        
        # Gera resumo com cota√ß√£o atualizada
        resumo_detalhado = gerar_resumo_compra(context)
        
        # Adiciona timestamp da cota√ß√£o
        timestamp = datetime.now().strftime("%H:%M:%S")
        resumo_com_timestamp = f"{resumo_detalhado}\\n\\nüïê Cota√ß√£o atualizada √†s {timestamp}"
        
        # Envia para o usu√°rio
        await update.message.reply_text(resumo_com_timestamp, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Erro ao obter cota√ß√£o: {e}")
        # Fallback para cota√ß√£o padr√£o
        ...
    '''
    
    print(codigo_exemplo)

if __name__ == "__main__":
    asyncio.run(demonstrar_cotacao_tempo_real())
    asyncio.run(simular_mudanca_cotacao())
    exemplo_integracao_api()
    
    print("\n" + "=" * 50)
    print("üéØ RESUMO DA DEMONSTRA√á√ÉO:")
    print("‚Ä¢ Integra√ß√£o com cota√ß√£o em tempo real funcionando")
    print("‚Ä¢ Impacto das mudan√ßas de cota√ß√£o vis√≠vel no resumo")
    print("‚Ä¢ C√≥digo de exemplo para implementa√ß√£o fornecido")
    print("‚Ä¢ Sistema robusto com fallback para erros")
    print("‚Ä¢ Atualiza√ß√£o autom√°tica de valores calculados")
