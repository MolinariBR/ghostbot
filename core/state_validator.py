"""
State Validator - Valida√ß√£o de estado do usu√°rio
===============================================

Este m√≥dulo fornece valida√ß√£o de estado para garantir consist√™ncia
dos dados do usu√°rio durante as conversas do bot.
"""

import logging
from typing import Any, Dict, Optional, List
from datetime import datetime, timedelta
from core.session_manager import get_user_data, set_user_data, clear_user_data

logger = logging.getLogger(__name__)

class StateValidator:
    """
    Validador de estado para bot do Telegram.
    
    Garante:
    - Consist√™ncia de dados
    - Valida√ß√£o de entrada
    - Preven√ß√£o de estados inv√°lidos
    """
    
    @staticmethod
    async def validate_pedido_state(user_id: str) -> Dict[str, Any]:
        """
        Valida o estado atual do pedido do usu√°rio.
        
        Args:
            user_id: ID do usu√°rio
            
        Returns:
            Dicion√°rio com estado validado ou erro
        """
        try:
            # Obter dados do pedido
            pedido_id = await get_user_data(user_id, 'pedido_id')
            valor = await get_user_data(user_id, 'valor')
            moeda = await get_user_data(user_id, 'moeda')
            status = await get_user_data(user_id, 'status')
            
            # Validar campos obrigat√≥rios
            if not pedido_id:
                return {
                    'valid': False,
                    'error': 'Pedido n√£o encontrado',
                    'message': '‚ùå **Pedido n√£o encontrado**\n\nüîÑ Inicie uma nova compra.'
                }
            
            if not valor or not moeda:
                return {
                    'valid': False,
                    'error': 'Dados do pedido incompletos',
                    'message': '‚ùå **Dados incompletos**\n\nüîÑ Inicie uma nova compra.'
                }
            
            # Validar valores
            try:
                valor_float = float(valor)
                if valor_float <= 0:
                    return {
                        'valid': False,
                        'error': 'Valor inv√°lido',
                        'message': '‚ùå **Valor inv√°lido**\n\nüí∞ O valor deve ser maior que zero.'
                    }
            except (ValueError, TypeError):
                return {
                    'valid': False,
                    'error': 'Valor n√£o num√©rico',
                    'message': '‚ùå **Valor inv√°lido**\n\nüí∞ O valor deve ser um n√∫mero v√°lido.'
                }
            
            # Validar moeda
            moedas_validas = ['BRL', 'USD', 'USDT', 'BTC', 'SAT']
            if moeda not in moedas_validas:
                return {
                    'valid': False,
                    'error': 'Moeda inv√°lida',
                    'message': f'‚ùå **Moeda inv√°lida**\n\nüí± Moedas aceitas: {", ".join(moedas_validas)}'
                }
            
            # Validar status
            status_validos = ['aguardando_pagamento', 'pago', 'enviando', 'concluido', 'cancelado']
            if status and status not in status_validos:
                return {
                    'valid': False,
                    'error': 'Status inv√°lido',
                    'message': '‚ùå **Status inv√°lido**\n\nüîÑ Inicie uma nova compra.'
                }
            
            return {
                'valid': True,
                'pedido_id': pedido_id,
                'valor': valor_float,
                'moeda': moeda,
                'status': status
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o do pedido: {e}")
            return {
                'valid': False,
                'error': 'Erro interno',
                'message': '‚ùå **Erro interno**\n\nüîß Tente novamente ou entre em contato com o suporte.'
            }
    
    @staticmethod
    async def validate_lightning_address(address: str) -> Dict[str, Any]:
        """
        Valida um endere√ßo Lightning.
        
        Args:
            address: Endere√ßo Lightning a ser validado
            
        Returns:
            Dicion√°rio com resultado da valida√ß√£o
        """
        try:
            if not address or not address.strip():
                return {
                    'valid': False,
                    'error': 'Endere√ßo vazio',
                    'message': '‚ùå **Endere√ßo vazio**\n\n‚ö° Por favor, envie um endere√ßo Lightning v√°lido.'
                }
            
            address = address.strip()
            
            # Validar Lightning Address (formato: user@domain.com)
            if '@' in address:
                parts = address.split('@')
                if len(parts) != 2:
                    return {
                        'valid': False,
                        'error': 'Formato Lightning Address inv√°lido',
                        'message': '‚ùå **Formato inv√°lido**\n\n‚ö° Lightning Address deve ser: `user@domain.com`'
                    }
                
                user, domain = parts
                if not user or not domain or '.' not in domain:
                    return {
                        'valid': False,
                        'error': 'Lightning Address malformado',
                        'message': '‚ùå **Endere√ßo inv√°lido**\n\n‚ö° Exemplo v√°lido: `sua_carteira@walletofsatoshi.com`'
                    }
                
                return {
                    'valid': True,
                    'type': 'lightning_address',
                    'address': address
                }
            
            # Validar Invoice Lightning (formato: lnbc...)
            elif address.startswith('lnbc'):
                if len(address) < 50:  # Invoice m√≠nimo
                    return {
                        'valid': False,
                        'error': 'Invoice Lightning muito curto',
                        'message': '‚ùå **Invoice inv√°lido**\n\n‚ö° O invoice Lightning deve ter pelo menos 50 caracteres.'
                    }
                
                return {
                    'valid': True,
                    'type': 'lightning_invoice',
                    'address': address
                }
            
            else:
                return {
                    'valid': False,
                    'error': 'Formato n√£o reconhecido',
                    'message': '‚ùå **Formato n√£o reconhecido**\n\n‚ö° **Formatos aceitos:**\n'
                              '‚Ä¢ Lightning Address: `user@domain.com`\n'
                              '‚Ä¢ Invoice Lightning: `lnbc...`\n\n'
                              'üí° **Exemplo:** `sua_carteira@walletofsatoshi.com`'
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o do endere√ßo Lightning: {e}")
            return {
                'valid': False,
                'error': 'Erro interno',
                'message': '‚ùå **Erro interno**\n\nüîß Tente novamente ou entre em contato com o suporte.'
            }
    
    @staticmethod
    async def validate_valor_entrada(valor: str, moeda: str) -> Dict[str, Any]:
        """
        Valida o valor de entrada do usu√°rio.
        
        Args:
            valor: Valor digitado pelo usu√°rio
            moeda: Moeda selecionada
            
        Returns:
            Dicion√°rio com resultado da valida√ß√£o
        """
        try:
            if not valor or not valor.strip():
                return {
                    'valid': False,
                    'error': 'Valor vazio',
                    'message': '‚ùå **Valor vazio**\n\nüí∞ Por favor, digite um valor v√°lido.'
                }
            
            valor = valor.strip().replace(',', '.')
            
            # Validar se √© n√∫mero
            try:
                valor_float = float(valor)
            except ValueError:
                return {
                    'valid': False,
                    'error': 'Valor n√£o num√©rico',
                    'message': '‚ùå **Valor inv√°lido**\n\nüí∞ Digite apenas n√∫meros (ex: 100.50).'
                }
            
            # Validar valor m√≠nimo e m√°ximo por moeda
            limites = {
                'BRL': {'min': 10.0, 'max': 10000.0},
                'USD': {'min': 2.0, 'max': 2000.0},
                'USDT': {'min': 2.0, 'max': 2000.0},
                'BTC': {'min': 0.0001, 'max': 1.0},
                'SAT': {'min': 10000, 'max': 100000000}
            }
            
            if moeda not in limites:
                return {
                    'valid': False,
                    'error': 'Moeda n√£o suportada',
                    'message': f'‚ùå **Moeda n√£o suportada**\n\nüí± Moedas aceitas: {", ".join(limites.keys())}'
                }
            
            limite = limites[moeda]
            
            if valor_float < limite['min']:
                return {
                    'valid': False,
                    'error': 'Valor muito baixo',
                    'message': f'‚ùå **Valor muito baixo**\n\nüí∞ Valor m√≠nimo para {moeda}: {limite["min"]}'
                }
            
            if valor_float > limite['max']:
                return {
                    'valid': False,
                    'error': 'Valor muito alto',
                    'message': f'‚ùå **Valor muito alto**\n\nüí∞ Valor m√°ximo para {moeda}: {limite["max"]}'
                }
            
            return {
                'valid': True,
                'valor': valor_float,
                'moeda': moeda
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o do valor: {e}")
            return {
                'valid': False,
                'error': 'Erro interno',
                'message': '‚ùå **Erro interno**\n\nüîß Tente novamente ou entre em contato com o suporte.'
            }
    
    @staticmethod
    async def clear_user_state(user_id: str) -> None:
        """
        Limpa o estado do usu√°rio de forma segura.
        """
        try:
            # Limpar toda a sess√£o do usu√°rio
            await clear_user_data(user_id)
            
            logger.info(f"üßπ Estado limpo para usu√°rio: {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao limpar estado do usu√°rio {user_id}: {e}")

# Inst√¢ncia global do StateValidator
state_validator = StateValidator() 