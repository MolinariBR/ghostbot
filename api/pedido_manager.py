import asyncio
import sqlite3
import logging
import sys
from datetime import datetime
from typing import Dict, Any, Optional
from core.validador_depix import ValidadorDepix
import traceback

# Configura√ß√£o de logging
logger = logging.getLogger(__name__)

# Configura√ß√£o adicional para debug
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/pedido_manager.log'),
        logging.StreamHandler()
    ]
)

class PedidoManager:
    """Gerencia pedidos e valida√ß√£o de pagamento PIX."""
    
    def __init__(self, db_path: str = "../data/deposit.db"):
        """
        Inicializa o gerenciador de pedidos.
        
        Args:
            db_path: Caminho para o banco de dados SQLite
        """
        import os
        # Corrigir para caminho absoluto relativo ao projeto
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        self.db_path = os.path.join(base_dir, 'data', 'deposit.db')
        logger.debug(f"üîß Inicializando PedidoManager com db_path: {self.db_path}")
        
        logger.debug("üîë Inicializando ValidadorDepix...")
        self.validador = ValidadorDepix(api_key="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhbGciOiJSUzI1NiIsImVudiI6InByb2QiLCJleHAiOjE3ODI3NjUzNzcsImlhdCI6MTc1MTY2MTM3NywianRpIjoiNTY4OTlhZTdjMGJlIiwic2NvcGUiOlsiZGVwb3NpdCIsIndpdGhkcmF3Il0sInN1YiI6Imdob3N0IiwidHlwIjoiSldUIn0.fcobx8C6rPyYAYKo1WBhwyvErWHlX_ZOaZM3QvrOtBS5EGip8ofxX2h7lnJjZozNvu_6qI7SK3EsS8sPGYAkBWHvON3huWzXN--NkZV9HK4G5VMIYESdDqTvS7xnBcEJFlKjpq6wbN1siYu8Zp6b7RTfeRBlG4lNYiFVe3DWBJW2lcfTAOhMnpFQ4DPClxek-htU-pDtZcBwwgMfpBVGBIeiGVRV4YAvKFUeKItNijbBIwZtP3qsxslR-W8aaJUQ35OkPkBfrrw6OKz94Ng4xVs9uOZJ64ZBwVNzjKX_r6OIXtjVRbaErU-R4scdMlKYz-yj7bu0NhtmJTccruYyN5ITWtcTwxL9avhEp_ej8Ve3rWaf3ezsKejEol2iVakrHU9JDgLzmWxo7PXxTeipw5GlkXXo5IgtxxI-ViIHzPO3L816ZxdGhMlLS6fHEcZC1slWALUQgFxrS2VOLAfV105K63g4_X7_JKbEH0w7tOpaqd0Fl3VvodtKzH33JPNSfj9AD7hhJwhX6tDQvOtSpoRu10uRwPcVv_wfuqsgyaT6kfBJ5WKUdpyWFvSWWKjI5S907cjj8uXbazycBMQtZaL_aIRuqCEY3x_d8J_UlfS-vPwjC99RsXxMztXIzyQNdper7wIhVA604JiP5kvGN3ipzwIGNYT3jakbDviYNE0")
        logger.debug("‚úÖ ValidadorDepix inicializado com sucesso")
        
        # Cria a tabela se n√£o existir
        logger.debug("üóÑÔ∏è Criando/verificando tabela de pedidos...")
        self._criar_tabela()
        logger.debug("‚úÖ PedidoManager inicializado com sucesso")
    
    def _criar_tabela(self):
        """Cria a tabela de pedidos se n√£o existir."""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS pedidos_bot (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    gtxid TEXT NOT NULL,
                    chatid TEXT NOT NULL,
                    moeda TEXT NOT NULL,
                    rede TEXT NOT NULL,
                    valor REAL NOT NULL,
                    comissao REAL NOT NULL,
                    parceiro REAL NOT NULL,
                    cotacao REAL NOT NULL,
                    recebe REAL NOT NULL,
                    forma_pagamento TEXT NOT NULL,
                    depix_id TEXT,
                    status TEXT DEFAULT 'novo',
                    pagamento_verificado INTEGER DEFAULT 0,
                    tentativas_verificacao INTEGER DEFAULT 0,
                    criado_em DATETIME DEFAULT CURRENT_TIMESTAMP,
                    atualizado_em DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            conn.commit()
            conn.close()
            logger.info("Tabela pedidos_bot criada/verificada com sucesso")
            
        except Exception as e:
            logger.error(f"Erro ao criar tabela: {e}")
    
    def salvar_pedido(self, dados_pedido: Dict[str, Any]) -> bool:
        """
        Salva um pedido no banco de dados.
        
        Args:
            dados_pedido: Dicion√°rio com os dados do pedido
            
        Returns:
            True se salvou com sucesso, False caso contr√°rio
        """
        logger.debug(f"üíæ Iniciando salvamento do pedido: {dados_pedido.get('gtxid')}")
        logger.debug(f"üìä Dados do pedido: {dados_pedido}")
        
        try:
            # Valida√ß√£o defensiva dos campos obrigat√≥rios
            campos_obrigatorios = ['amount_in_cents', 'comissao_in_cents', 'parceiro_in_cents', 'send']
            for campo in campos_obrigatorios:
                if dados_pedido.get(campo) is None:
                    logger.error(f"‚ùå Campo obrigat√≥rio ausente: {campo}")
                    return False
            logger.debug(f"üîó Conectando ao banco: {self.db_path}")
            with sqlite3.connect(self.db_path, timeout=30) as conn:
                conn.execute('PRAGMA journal_mode=WAL;')
                cursor = conn.cursor()
                
                # Dados para inser√ß√£o - usar as chaves corretas
                dados_insercao = (
                    dados_pedido.get('gtxid'),
                    dados_pedido.get('chatid'),
                    dados_pedido.get('moeda', 'BTC'),
                    dados_pedido.get('rede', 'Lightning'),
                    dados_pedido.get('amount_in_cents'),
                    dados_pedido.get('comissao_in_cents'),
                    dados_pedido.get('parceiro_in_cents'),
                    dados_pedido.get('cotacao'),
                    dados_pedido.get('send'),
                    dados_pedido.get('forma_pagamento', 'PIX'),
                    'novo'
                )
                
                logger.debug(f"üß© Tupla para insert: {dados_insercao}")
                logger.debug(f"üìù Executando INSERT com dados: {dados_insercao}")
                
                cursor.execute("""
                    INSERT INTO pedidos_bot (
                        gtxid, chatid, moeda, rede, valor, comissao, parceiro, 
                        cotacao, recebe, forma_pagamento, status
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, dados_insercao)
                
                logger.debug("üíæ Commitando transa√ß√£o...")
                conn.commit()
            logger.info(f"‚úÖ Pedido salvo com sucesso: {dados_pedido.get('gtxid')}")
            return True
            
        except Exception as e:
            gtxid = dados_pedido.get('gtxid', 'N/A')
            depix_id = dados_pedido.get('depix_id', 'N/A')
            chatid = dados_pedido.get('chatid', 'N/A')
            print(f"\033[1;31m[ERRO] PedidoManager: {e}\033[0m")
            print(traceback.format_exc())
            with open('logs/fluxo_erros.log', 'a') as f:
                f.write(f"[ERRO] PedidoManager | gtxid: {gtxid} | depix_id: {depix_id} | chatid: {chatid}\n{e}\n{traceback.format_exc()}\n")
            logger.error(f"[ERRO] PedidoManager: {e}\n{traceback.format_exc()}")
            return False
    
    async def verificar_pagamento_background(self, depix_id: str, gtxid: str, chatid: str, max_tentativas: int = 5):
        """
        Verifica pagamento em background (stateless function).
        
        Args:
            depix_id: ID do dep√≥sito PIX
            gtxid: ID do pedido
            chatid: ID do chat do usu√°rio
            max_tentativas: N√∫mero m√°ximo de tentativas (padr√£o: 5)
        """
        logger.info(f"üöÄ INICIANDO STATELESS FUNCTION - Verifica√ß√£o de pagamento")
        logger.info(f"üìã Par√¢metros: depix_id={depix_id}, gtxid={gtxid}, chatid={chatid}, max_tentativas={max_tentativas}")
        
        for tentativa in range(1, max_tentativas + 1):
            try:
                logger.info(f"\033[1;36müîÑ TENTATIVA {tentativa}/{max_tentativas} - Iniciando verifica√ß√£o...\033[0m")
                print(f"\033[1;36müîÑ [PEDIDO] Tentativa {tentativa}/{max_tentativas} - Verificando depix_id: {depix_id}\033[0m")
                logger.debug(f"üîç Consultando dep√≥sito: {depix_id}")
                
                # Consulta o status do pagamento
                logger.debug("üì° Fazendo requisi√ß√£o para API Depix...")
                resultado = await self.validador.consultar_deposito(depix_id)
                logger.debug(f"üì• Resposta da API: {resultado}")
                print(f"[PEDIDO] Resposta Depix: {resultado}")
                
                if resultado.get('success'):
                    status = resultado.get('data', {}).get('status', 'unknown')
                    blockchain_txid = resultado.get('data', {}).get('blockchainTxID')
                    logger.info(f"\033[1;32m‚úÖ Status do pagamento: {status}\033[0m")
                    print(f"\033[1;32m‚úÖ [PEDIDO] Status do pagamento: {status}\033[0m")
                    logger.debug(f"üìä Dados completos da resposta: {resultado}")
                    # Atualiza o banco com o status e blockchainTxID se existir
                    logger.debug(f"üíæ Atualizando status no banco: {status}")
                    self._atualizar_status_pedido(str(gtxid or ''), status, tentativa)
                    if blockchain_txid:
                        try:
                            conn = sqlite3.connect(self.db_path)
                            cursor = conn.cursor()
                            cursor.execute("UPDATE pedidos_bot SET blockchainTxID = ?, atualizado_em = CURRENT_TIMESTAMP WHERE gtxid = ?", (blockchain_txid, gtxid))
                            conn.commit()
                            conn.close()
                            logger.info(f"‚úÖ blockchainTxID salvo para gtxid {gtxid}: {blockchain_txid}")
                        except Exception as e:
                            logger.error(f"Erro ao salvar blockchainTxID: {e}")
                    
                    # Se o pagamento foi confirmado, para as verifica√ß√µes
                    if status in ['paid', 'completed', 'confirmed', 'depix_confirmed', 'depix_sent']:
                        logger.info(f"\033[1;32müéâ PAGAMENTO CONFIRMADO! Parando verifica√ß√µes. Status: {status}\033[0m")
                        print(f"\033[1;32müéâ [PEDIDO] PAGAMENTO CONFIRMADO!\033[0m")
                        # Chamar fun√ß√£o para pedir endere√ßo Lightning
                        try:
                            from menu.menu_compra import ativar_aguardar_lightning_address
                            from telegram import Bot
                            from config.config import BOT_TOKEN
                            bot = Bot(token=BOT_TOKEN)
                            logger.info(f"[PEDIDO] Chamando ativar_aguardar_lightning_address para chatid={chatid}, gtxid={gtxid}")
                            print(f"[PEDIDO] Chamando ativar_aguardar_lightning_address para chatid={chatid}, gtxid={gtxid}")
                            # Converter gtxid para int se poss√≠vel
                            try:
                                pedido_id_int = int(gtxid)
                            except Exception:
                                pedido_id_int = 0
                            # Passar o bot explicitamente
                            asyncio.create_task(ativar_aguardar_lightning_address(bot, int(chatid), pedido_id_int))
                        except Exception as e:
                            logger.error(f"Erro ao ativar aguardar_lightning_address: {e}")
                            print(f"[ERRO] Erro ao ativar aguardar_lightning_address: {e}")
                        break
                    else:
                        logger.info(f"‚è≥ Pagamento ainda pendente. Status: {status}")
                        print(f"‚è≥ [PEDIDO] Pagamento ainda pendente. Status: {status}")
                    
                else:
                    error_msg = resultado.get('error', 'Erro desconhecido')
                    logger.warning(f"‚ö†Ô∏è Erro na verifica√ß√£o {tentativa}: {error_msg}")
                    print(f"‚ö†Ô∏è [PEDIDO] Erro na verifica√ß√£o {tentativa}: {error_msg}")
                    logger.debug(f"‚ùå Resposta de erro completa: {resultado}")
                    self._atualizar_status_pedido(str(gtxid or ''), 'erro_verificacao', tentativa)
                
                # Aguarda 50 segundos antes da pr√≥xima verifica√ß√£o
                if tentativa < max_tentativas:
                    logger.info(f"‚è∞ Aguardando 50 segundos antes da pr√≥xima tentativa...")
                    print(f"‚è∞ [PEDIDO] Aguardando 50 segundos...")
                    await asyncio.sleep(50)
            except Exception as e:
                logger.error(f"üí• ERRO CR√çTICO na tentativa {tentativa}: {e}")
                print(f"üí• [PEDIDO] ERRO CR√çTICO: {e}")
                self._atualizar_status_pedido(str(gtxid or ''), 'erro_verificacao', tentativa)
                if tentativa < max_tentativas:
                    logger.info(f"‚è∞ Aguardando 50 segundos ap√≥s erro...")
                    print(f"‚è∞ [PEDIDO] Aguardando 50 segundos ap√≥s erro...")
                    await asyncio.sleep(50)
        
        logger.info(f"üèÅ VERIFICA√á√ÉO CONCLU√çDA para gtxid: {gtxid}")
        print(f"üèÅ [PEDIDO] VERIFICA√á√ÉO CONCLU√çDA para gtxid: {gtxid}")
        logger.info(f"üìä Total de tentativas realizadas: {max_tentativas}")
    
    def _atualizar_status_pedido(self, gtxid: str, status: str, tentativa: int):
        """
        Atualiza o status do pedido no banco de dados.
        
        Args:
            gtxid: ID do pedido
            status: Novo status
            tentativa: N√∫mero da tentativa
        """
        logger.debug(f"üíæ Atualizando status: gtxid={gtxid}, status={status}, tentativa={tentativa}")
        
        try:
            logger.debug(f"üîó Conectando ao banco para atualiza√ß√£o...")
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            logger.debug(f"üìù Executando UPDATE...")
            cursor.execute("""
                UPDATE pedidos_bot 
                SET status = ?, tentativas_verificacao = ?, atualizado_em = CURRENT_TIMESTAMP
                WHERE gtxid = ?
            """, (status, tentativa, gtxid))
            
            rows_affected = cursor.rowcount
            logger.debug(f"üìä Linhas afetadas: {rows_affected}")
            
            logger.debug("üíæ Commitando atualiza√ß√£o...")
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Status atualizado para gtxid {gtxid}: {status} (tentativa {tentativa})")
            
        except Exception as e:
            gtxid_log = gtxid if 'gtxid' in locals() else 'N/A'
            depix_id_log = 'N/A' # N√£o dispon√≠vel aqui
            chatid_log = 'N/A' # N√£o dispon√≠vel aqui
            print(f"\033[1;31m[ERRO] PedidoManager: {e}\033[0m")
            print(traceback.format_exc())
            with open('logs/fluxo_erros.log', 'a') as f:
                f.write(f"[ERRO] PedidoManager | gtxid: {gtxid_log} | depix_id: {depix_id_log} | chatid: {chatid_log}\n{e}\n{traceback.format_exc()}\n")
            logger.error(f"[ERRO] PedidoManager: {e}\n{traceback.format_exc()}")

    def atualizar_status_pedido(self, gtxid: str, status: str, tentativa: int = 0):
        """
        Atualiza o status do pedido no banco de dados (interface p√∫blica).
        """
        self._atualizar_status_pedido(gtxid, status, tentativa)

print("\033[1;34müí§ STATELESS FUNCTION AGUARDANDO EVENTO DE COMPRA...\033[0m", file=sys.stderr)

# Inst√¢ncia global
logger.info("üåç CRIANDO INST√ÇNCIA GLOBAL DO PEDIDO MANAGER...")
pedido_manager = PedidoManager()
logger.info("‚úÖ INST√ÇNCIA GLOBAL CRIADA COM SUCESSO")
logger.info("üí§ STATELESS FUNCTION AGUARDANDO ATIVA√á√ÉO...")

async def processar_pedido_completo(dados_pedido: Dict[str, Any], depix_id: str):
    """
    Fun√ß√£o stateless para processar pedido completo.
    
    Args:
        dados_pedido: Dados do pedido para salvar no banco
        depix_id: ID do dep√≥sito PIX para verifica√ß√£o
    """
    logger.info(f"üöÄ INICIANDO PROCESSAMENTO COMPLETO DO PEDIDO")
    logger.info(f"üìã Par√¢metros recebidos: depix_id={depix_id}")
    logger.debug(f"üìä Dados do pedido: {dados_pedido}")
    
    try:
        # 1. Salva o pedido no banco
        logger.info("üíæ ETAPA 1: Salvando pedido no banco...")
        sucesso_salvamento = pedido_manager.salvar_pedido(dados_pedido)
        
        if not sucesso_salvamento:
            logger.error("‚ùå Falha ao salvar pedido no banco - ABORTANDO PROCESSAMENTO")
            return
        
        logger.info("‚úÖ Pedido salvo com sucesso no banco")
        
        # 2. Inicia verifica√ß√£o de pagamento em background
        gtxid = dados_pedido.get('gtxid')
        chatid = dados_pedido.get('chatid')
        
        logger.info(f"üîÑ ETAPA 2: Iniciando verifica√ß√£o de pagamento em background...")
        logger.info(f"üìã Par√¢metros para verifica√ß√£o: gtxid={gtxid}, chatid={chatid}, depix_id={depix_id}")
        
        # Executa a verifica√ß√£o em background (n√£o bloqueia)
        logger.debug("üéØ Criando task ass√≠ncrona para verifica√ß√£o...")
        task = asyncio.create_task(
            pedido_manager.verificar_pagamento_background(str(depix_id or ''), str(gtxid or ''), str(chatid or ''))
        )
        logger.debug(f"‚úÖ Task criada: {task}")
        
        logger.info(f"üéâ PEDIDO PROCESSADO COM SUCESSO: {gtxid}")
        logger.info(f"üìä Verifica√ß√£o de pagamento iniciada em background")
        
    except Exception as e:
        gtxid_log = 'N/A'
        depix_id_log = 'N/A'
        chatid_log = 'N/A'
        if 'dados_pedido' in locals() and isinstance(dados_pedido, dict):
            gtxid_log = dados_pedido.get('gtxid', 'N/A')
            depix_id_log = dados_pedido.get('depix_id', 'N/A')
            chatid_log = dados_pedido.get('chatid', 'N/A')
        print(f"\033[1;31m[ERRO] PedidoManager: {e}\033[0m")
        print(traceback.format_exc())
        with open('logs/fluxo_erros.log', 'a') as f:
            f.write(f"[ERRO] PedidoManager | gtxid: {gtxid_log} | depix_id: {depix_id_log} | chatid: {chatid_log}\n{e}\n{traceback.format_exc()}\n")
        logger.error(f"[ERRO] PedidoManager: {e}\n{traceback.format_exc()}")
        logger.error(f"üìã Tipo do erro: {type(e).__name__}")
        logger.error(f"üìä Dados que causaram erro: {dados_pedido}")

# Fun√ß√£o para uso direto
def salvar_e_verificar_pagamento(dados_pedido: Dict[str, Any], depix_id: str):
    """
    Fun√ß√£o s√≠ncrona para salvar pedido e iniciar verifica√ß√£o de pagamento.
    
    Args:
        dados_pedido: Dados do pedido
        depix_id: ID do dep√≥sito PIX
    """
    print(f"\033[1;33müî•üî•üî• STATELESS FUNCTION ATIVADA POR EVENTO DE COMPRA! üî•üî•üî•\033[0m", file=sys.stderr)
    logger.info(f"üöÄ INICIANDO FUN√á√ÉO S√çNCRONA: salvar_e_verificar_pagamento")
    logger.info(f"üìã Par√¢metros: depix_id={depix_id}")
    logger.debug(f"üìä Dados do pedido: {dados_pedido}")
    
    try:
        # 1. Salva o pedido no banco (s√≠ncrono)
        logger.info("üíæ Salvando pedido no banco...")
        sucesso_salvamento = pedido_manager.salvar_pedido(dados_pedido)
        
        if not sucesso_salvamento:
            logger.error("‚ùå Falha ao salvar pedido no banco")
            return
        
        logger.info("‚úÖ Pedido salvo com sucesso no banco")
        
        # 2. Inicia verifica√ß√£o em background usando threading
        import threading
        import time
        
        def verificar_em_background():
            """Fun√ß√£o que roda em thread separada para verifica√ß√£o"""
            logger.info("üîÑ Iniciando verifica√ß√£o em thread separada...")
            
            # Cria um novo loop para esta thread
            new_loop = asyncio.new_event_loop()
            asyncio.set_event_loop(new_loop)
            
            try:
                gtxid = dados_pedido.get('gtxid')
                chatid = dados_pedido.get('chatid')
                
                logger.info(f"üìã Par√¢metros para verifica√ß√£o: gtxid={gtxid}, chatid={chatid}, depix_id={depix_id}")
                
                # Executa a verifica√ß√£o
                new_loop.run_until_complete(
                    pedido_manager.verificar_pagamento_background(str(depix_id or ''), str(gtxid or ''), str(chatid or ''))
                )
                
                logger.info("‚úÖ Verifica√ß√£o em background conclu√≠da")
                
            except Exception as e:
                gtxid_log = gtxid if 'gtxid' in locals() else 'N/A'
                depix_id_log = dados_pedido.get('depix_id', 'N/A')
                chatid_log = dados_pedido.get('chatid', 'N/A')
                print(f"\033[1;31m[ERRO] PedidoManager: {e}\033[0m")
                print(traceback.format_exc())
                with open('logs/fluxo_erros.log', 'a') as f:
                    f.write(f"[ERRO] PedidoManager | gtxid: {gtxid_log} | depix_id: {depix_id_log} | chatid: {chatid_log}\n{e}\n{traceback.format_exc()}\n")
                logger.error(f"[ERRO] PedidoManager: {e}\n{traceback.format_exc()}")
            finally:
                new_loop.close()
        
        # Inicia a thread de verifica√ß√£o
        logger.info("üßµ Iniciando thread de verifica√ß√£o...")
        thread = threading.Thread(target=verificar_em_background, daemon=True)
        thread.start()
        
        logger.info("‚úÖ Fun√ß√£o s√≠ncrona executada com sucesso")
        logger.info("üìä Verifica√ß√£o de pagamento iniciada em thread separada")
        
    except Exception as e:
        gtxid_log = dados_pedido.get('gtxid', 'N/A')
        depix_id_log = dados_pedido.get('depix_id', 'N/A')
        chatid_log = dados_pedido.get('chatid', 'N/A')
        print(f"\033[1;31m[ERRO] PedidoManager: {e}\033[0m")
        print(traceback.format_exc())
        with open('logs/fluxo_erros.log', 'a') as f:
            f.write(f"[ERRO] PedidoManager | gtxid: {gtxid_log} | depix_id: {depix_id_log} | chatid: {chatid_log}\n{e}\n{traceback.format_exc()}\n")
        logger.error(f"[ERRO] PedidoManager: {e}\n{traceback.format_exc()}")
        logger.error(f"üìã Tipo do erro: {type(e).__name__}")
    
    logger.info("üèÅ Fun√ß√£o s√≠ncrona finalizada")