#!/usr/bin/env python3
"""
Teste de simula√ß√£o completa da intera√ß√£o do usu√°rio para verificar o fluxo corrigido.
"""
import asyncio
import logging
from unittest.mock import MagicMock, AsyncMock

# Configura logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MockUpdate:
    """Simula o objeto Update do Telegram."""
    def __init__(self, message_text):
        self.message = MagicMock()
        self.message.text = message_text
        self.message.reply_text = AsyncMock()

class MockContext:
    """Simula o objeto Context do Telegram."""
    def __init__(self):
        self.user_data = {}

async def simular_fluxo_completo_usuario():
    """Simula o fluxo completo de um usu√°rio fazendo uma compra."""
    print("\nüé≠ SIMULA√á√ÉO COMPLETA DO FLUXO DO USU√ÅRIO")
    print("=" * 60)
    
    # 1. Usu√°rio seleciona moeda
    print("\n1Ô∏è‚É£ SELE√á√ÉO DA MOEDA")
    context = MockContext()
    context.user_data['moeda'] = '‚Çø Bitcoin (BTC)'  # Como vem do teclado
    print(f"   üë§ Usu√°rio selecionou: '{context.user_data['moeda']}'")
    
    # 2. Usu√°rio seleciona rede
    print("\n2Ô∏è‚É£ SELE√á√ÉO DA REDE")
    context.user_data['rede'] = 'Lightning Network'
    print(f"   üåê Rede selecionada: '{context.user_data['rede']}'")
    
    # 3. Usu√°rio informa valor
    print("\n3Ô∏è‚É£ VALOR INFORMADO")
    context.user_data['valor_brl'] = 250.0
    print(f"   üí∞ Valor: R$ {context.user_data['valor_brl']}")
    
    # 4. Usu√°rio informa CPF
    print("\n4Ô∏è‚É£ CPF INFORMADO")
    context.user_data['cpf'] = '12345678900'
    print(f"   üìÑ CPF: {context.user_data['cpf']}")
    
    # 5. Sistema gera resumo da compra
    print("\n5Ô∏è‚É£ GERA√á√ÉO DO RESUMO DA COMPRA")
    print("   üîÑ Chamando fun√ß√£o resumo_compra...")
    
    # Importa a fun√ß√£o real do menu
    import sys
    sys.path.append('/home/mau/bot/ghost')
    
    # Simula a fun√ß√£o obter_cotacao
    async def obter_cotacao_mock(moeda):
        print(f"   üí± Obtendo cota√ß√£o para: '{moeda}'")
        return 350000.0  # Cota√ß√£o BTC simulada
    
    # Substitui a fun√ß√£o original temporariamente
    import menus.menu_compra
    original_obter_cotacao = menus.menu_compra.obter_cotacao
    menus.menu_compra.obter_cotacao = obter_cotacao_mock
    
    try:
        # Cria mocks para Update
        update = MockUpdate("")
        
        # Chama a fun√ß√£o real de resumo da compra
        print("   üìû Executando resumo_compra() real...")
        resultado = await menus.menu_compra.resumo_compra(update, context)
        
        # Verifica se a mensagem foi enviada
        if update.message.reply_text.called:
            mensagem_enviada = update.message.reply_text.call_args[0][0]
            print("\nüì® MENSAGEM ENVIADA AO USU√ÅRIO:")
            print("=" * 50)
            print(mensagem_enviada)
            print("=" * 50)
            
            # Verifica se o percentual est√° correto
            if "10.0%" in mensagem_enviada:
                print("\n‚úÖ SUCESSO! Percentual 10.0% encontrado na mensagem!")
                return True
            elif "1.0%" in mensagem_enviada:
                print("\n‚ùå ERRO! Ainda mostra percentual 1.0% (fallback)!")
                return False
            else:
                print("\n‚ö†Ô∏è  WARNING! N√£o foi poss√≠vel identificar o percentual na mensagem.")
                return False
        else:
            print("\n‚ùå ERRO! Nenhuma mensagem foi enviada.")
            return False
            
    except Exception as e:
        print(f"\nüí• ERRO DURANTE EXECU√á√ÉO: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        # Restaura a fun√ß√£o original
        menus.menu_compra.obter_cotacao = original_obter_cotacao

async def verificar_logs_em_tempo_real():
    """Verifica se h√° mensagens de erro sendo geradas."""
    print("\nüìä VERIFICA√á√ÉO DE LOGS")
    print("=" * 40)
    
    # Intercepta logs do sistema de comiss√£o
    import logging
    
    log_messages = []
    
    class LogCapture(logging.Handler):
        def emit(self, record):
            log_messages.append(self.format(record))
    
    # Adiciona handler personalizado
    log_capture = LogCapture()
    logging.getLogger('limites.comissao').addHandler(log_capture)
    
    try:
        # Executa teste que pode gerar logs
        from limites.comissao import calcular_comissao
        
        print("   üß™ Testando com string completa (deveria gerar warning)...")
        resultado1 = calcular_comissao(250.0, "‚Çø Bitcoin (BTC)")
        
        print("   üß™ Testando com sigla extra√≠da (deveria funcionar)...")
        resultado2 = calcular_comissao(250.0, "BTC")
        
        print(f"\nüìù LOGS CAPTURADOS:")
        for i, msg in enumerate(log_messages, 1):
            print(f"   {i}. {msg}")
        
        if resultado1 is None and resultado2 is not None:
            print(f"\n‚úÖ COMPORTAMENTO CORRETO:")
            print(f"   - String completa: None (gera warning)")
            print(f"   - Sigla extra√≠da: Sucesso (percentual {resultado2['comissao']['percentual']:.1f}%)")
            return True
        else:
            print(f"\n‚ùå COMPORTAMENTO INESPERADO:")
            print(f"   - String completa: {resultado1}")
            print(f"   - Sigla extra√≠da: {resultado2}")
            return False
            
    finally:
        # Remove handler
        logging.getLogger('limites.comissao').removeHandler(log_capture)

async def main():
    """Executa a simula√ß√£o completa."""
    print("üöÄ SIMULA√á√ÉO COMPLETA DO FLUXO CORRIGIDO")
    print("=" * 70)
    
    # Verifica logs primeiro
    logs_ok = await verificar_logs_em_tempo_real()
    
    # Simula fluxo do usu√°rio
    fluxo_ok = await simular_fluxo_completo_usuario()
    
    print("\n" + "=" * 70)
    print("üìã RESUMO FINAL:")
    print(f"   üóÇÔ∏è  Logs: {'‚úÖ OK' if logs_ok else '‚ùå PROBLEMA'}")
    print(f"   üë§ Fluxo do usu√°rio: {'‚úÖ OK' if fluxo_ok else '‚ùå PROBLEMA'}")
    
    if logs_ok and fluxo_ok:
        print("\nüéâ TUDO FUNCIONANDO PERFEITAMENTE!")
        print("   O bug do 1% foi corrigido com sucesso.")
        print("   O usu√°rio agora v√™ o percentual correto (10.0% para BTC).")
    else:
        print("\n‚ö†Ô∏è  AINDA H√Å PROBLEMAS A INVESTIGAR!")
    print("=" * 70)

if __name__ == "__main__":
    asyncio.run(main())
