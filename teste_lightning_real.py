#!/usr/bin/env python3
"""
TESTE LIGHTNING COM INVOICE REAL - Ghost P2P
============================================

Script para testar pagamentos Lightning com invoices reais.
"""

import requests
import json
import time
import sys

def gerar_invoice_teste():
    """Instrui como gerar um invoice real para teste."""
    print("üìã COMO GERAR INVOICE REAL PARA TESTE")
    print("=" * 50)
    print("üí° OP√á√ïES PARA GERAR INVOICE:")
    print()
    print("1Ô∏è‚É£ WALLET OF SATOSHI (Mobile):")
    print("   ‚Ä¢ Abrir app Wallet of Satoshi")
    print("   ‚Ä¢ Clicar em 'Receive'")
    print("   ‚Ä¢ Digitar valor: 1000 sats")
    print("   ‚Ä¢ Copiar invoice gerado")
    print()
    print("2Ô∏è‚É£ PHOENIX WALLET (Mobile):")
    print("   ‚Ä¢ Abrir Phoenix Wallet")
    print("   ‚Ä¢ Clicar em 'Receive'")
    print("   ‚Ä¢ Digitar: 1000 sats")
    print("   ‚Ä¢ Copiar payment request")
    print()
    print("3Ô∏è‚É£ BLUE WALLET (Mobile):")
    print("   ‚Ä¢ Criar Lightning Wallet")
    print("   ‚Ä¢ Clicar 'Receive'")
    print("   ‚Ä¢ Valor: 1000 sats")
    print("   ‚Ä¢ Copiar invoice")
    print()
    print("4Ô∏è‚É£ LINHA DE COMANDO (LND/CLN):")
    print("   lncli addinvoice --amt 1000 --memo 'Teste Ghost P2P'")
    print("   lightning-cli invoice 1000000 'teste' 'Ghost P2P'")
    print()
    print("‚ö†Ô∏è IMPORTANTE:")
    print("   ‚Ä¢ Invoice deve come√ßar com 'lnbc' (mainnet) ou 'lntb' (testnet)")
    print("   ‚Ä¢ Valor: 1000 sats (~R$ 2,00)")
    print("   ‚Ä¢ Invoice expira em ~1 hora")

def validar_invoice(invoice):
    """Valida formato b√°sico do invoice Lightning."""
    if not invoice:
        return False, "Invoice vazio"
    
    invoice = invoice.strip()
    
    if not (invoice.startswith('lnbc') or invoice.startswith('lntb')):
        return False, "Invoice deve come√ßar com 'lnbc' (mainnet) ou 'lntb' (testnet)"
    
    if len(invoice) < 50:
        return False, "Invoice muito curto (m√≠nimo 50 caracteres)"
    
    if len(invoice) > 1000:
        return False, "Invoice muito longo (m√°ximo 1000 caracteres)"
    
    return True, "Invoice v√°lido"

def criar_deposito_real():
    """Cria um dep√≥sito real para teste Lightning."""
    print("\nüÜï CRIANDO DEP√ìSITO REAL PARA TESTE")
    print("=" * 50)
    
    url = "https://useghost.squareweb.app/rest/deposit.php"
    depix_id = f"real_test_{int(time.time())}"
    
    payload = {
        "chatid": "7910260237",
        "user_id": 7910260237,
        "depix_id": depix_id,
        "status": "confirmado",  # PIX j√° foi pago
        "amount_in_cents": 200,  # R$ 2,00
        "moeda": "BTC", 
        "rede": "‚ö° Lightning",
        "send": 1000,  # 1000 sats
        "taxa": 0.10,  # R$ 0,10
        "address": "voltzapi@tria.com",
        "metodo_pagamento": "PIX",
        "forma_pagamento": "PIX",
        "comprovante": "PIX confirmado - Teste real Lightning",
        "action": "create"
    }
    
    print(f"üìù Depix ID: {depix_id}")
    print(f"üí∞ Valor PIX: R$ 2,00")
    print(f"‚ö° BTC para enviar: 1000 sats")
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Dep√≥sito criado: {result}")
            return depix_id
        else:
            print(f"   ‚ùå Erro: {response.text}")
            return None
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return None

def processar_pagamento_real(depix_id, client_invoice):
    """Processa pagamento Lightning real."""
    print(f"\n‚ö° PROCESSAMENTO PAGAMENTO REAL")
    print("=" * 50)
    print(f"üéØ Depix ID: {depix_id}")
    print(f"üìã Invoice: {client_invoice[:50]}...")
    
    url = "https://useghost.squareweb.app/voltz/voltz_rest.php"
    payload = {
        "action": "pay_invoice",
        "depix_id": depix_id,
        "client_invoice": client_invoice
    }
    
    print("‚ö†Ô∏è ATEN√á√ÉO: Este pagamento ser√° REAL!")
    print("üí∞ 1000 sats ser√£o enviados para a carteira fornecida")
    
    confirmacao = input("\nü§î Confirmar pagamento real? (sim/NAO): ").strip().lower()
    
    if confirmacao not in ['sim', 's', 'yes', 'y']:
        print("‚ùå Pagamento cancelado pelo usu√°rio")
        return None
    
    print("\nüöÄ Enviando pagamento Lightning...")
    
    try:
        response = requests.post(url, json=payload, timeout=30)
        print(f"   Status: {response.status_code}")
        print(f"   Resposta: {response.text}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   üìÑ JSON: {json.dumps(data, indent=2)}")
            
            if data.get('success'):
                print(f"\nüéâ PAGAMENTO REALIZADO COM SUCESSO!")
                print(f"   üìÑ Payment Hash: {data.get('payment_hash')}")
                if data.get('preimage'):
                    print(f"   üîë Preimage: {data.get('preimage')}")
                print(f"   üí∞ Taxa: {data.get('fee_msat', 0)} msat")
                print(f"   üì± Invoice pago: {client_invoice}")
                return data
            else:
                print(f"\n‚ùå PAGAMENTO FALHOU!")
                print(f"   Erro: {data.get('error')}")
                return None
        else:
            print(f"\n‚ùå Erro HTTP: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"\n‚ùå Erro de conex√£o: {e}")
        return None

def verificar_saldo_antes_depois():
    """Verifica saldo do n√≥ antes e depois do pagamento."""
    print(f"\nüí∞ VERIFICA√á√ÉO DE SALDO")
    print("=" * 50)
    
    url = "https://useghost.squareweb.app/voltz/voltz_rest.php"
    payload = {"action": "check_balance"}
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                balance = data.get('balance', {})
                sats = balance.get('balance', 0)
                print(f"   üí∞ Saldo atual: {sats:,} sats (~R$ {sats/50000:.2f})")
                return sats
            else:
                print(f"   ‚ùå Erro: {data.get('error')}")
        else:
            print(f"   ‚ùå HTTP Error: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    return None

def main():
    print("üß™ TESTE LIGHTNING COM INVOICE REAL")
    print("=" * 60)
    print("‚ö†Ô∏è ESTE TESTE ENVOLVE PAGAMENTO REAL DE 1000 SATS!")
    print("=" * 60)
    
    # 1. Verificar saldo inicial
    print("1Ô∏è‚É£ Verificando saldo inicial...")
    saldo_inicial = verificar_saldo_antes_depois()
    
    if not saldo_inicial or saldo_inicial < 2000:
        print("‚ùå Saldo insuficiente para teste (m√≠nimo: 2000 sats)")
        return
    
    # 2. Instru√ß√µes para gerar invoice
    gerar_invoice_teste()
    
    # 3. Solicitar invoice do usu√°rio
    print("\nüìã FORNECER INVOICE LIGHTNING")
    print("=" * 50)
    client_invoice = input("üîÆ Cole seu invoice Lightning aqui: ").strip()
    
    # 4. Validar invoice
    valido, mensagem = validar_invoice(client_invoice)
    
    if not valido:
        print(f"‚ùå Invoice inv√°lido: {mensagem}")
        return
    
    print(f"‚úÖ Invoice v√°lido: {mensagem}")
    
    # 5. Criar dep√≥sito
    depix_id = criar_deposito_real()
    
    if not depix_id:
        print("‚ùå Falha na cria√ß√£o do dep√≥sito")
        return
    
    # 6. Aguardar
    print("\n‚è±Ô∏è Aguardando 3 segundos...")
    time.sleep(3)
    
    # 7. Processar pagamento
    resultado = processar_pagamento_real(depix_id, client_invoice)
    
    # 8. Verificar saldo final
    print("\n2Ô∏è‚É£ Verificando saldo final...")
    saldo_final = verificar_saldo_antes_depois()
    
    if saldo_inicial and saldo_final:
        diferenca = saldo_inicial - saldo_final
        print(f"üìä Diferen√ßa: -{diferenca} sats")
    
    # 9. Resumo
    print(f"\nüìã RESUMO DO TESTE:")
    if resultado and resultado.get('success'):
        print(f"‚úÖ Pagamento Lightning realizado com sucesso!")
        print(f"‚úÖ Sistema Ghost P2P + Voltz funcionando!")
        print(f"‚úÖ Cliente recebeu 1000 sats via Lightning!")
    else:
        print(f"‚ùå Teste falhou - verificar logs e configura√ß√£o")
    
    print(f"\nüéØ PR√ìXIMO PASSO: Integrar no bot Telegram!")

if __name__ == "__main__":
    main()
